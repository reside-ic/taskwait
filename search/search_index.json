{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"taskwait","text":"<p>Wait for a task to complete.  This is a very small package and does not really warrant this level of complexity in documentation.  We're using this to help us bootstrap up some ideas around python doc generation.</p>"},{"location":"#reference","title":"Reference","text":"<p>Wait for a task to complete.</p> <p>This module is inspired by our R \"logwatch\" package.</p>"},{"location":"#taskwait.Result","title":"<code>Result</code>  <code>dataclass</code>","text":"<p>Result of waiting on a task.</p>"},{"location":"#taskwait.Result--attributes","title":"Attributes","text":"<p>status (str):     The final status, returned by the <code>status()</code> method   start (float):     The task start time, in seconds since the Epoch   end (float):     The task end time, in seconds since the Epoch</p> Source code in <code>src/taskwait/__init__.py</code> <pre><code>@dataclass\nclass Result:\n    \"\"\"\n    Result of waiting on a task.\n\n    Attributes\n    ----------\n      status (str):\n        The final status, returned by the ``status()`` method\n      start (float):\n        The task start time, in seconds since the Epoch\n      end (float):\n        The task end time, in seconds since the Epoch\n\n    \"\"\"\n\n    status: str\n    start: float\n    end: float\n</code></pre>"},{"location":"#taskwait.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for tasks.</p> <p>Inherit from this class to create something suitable to pass into taskwait.</p>"},{"location":"#taskwait.Task--attributes","title":"Attributes","text":"<p>status_waiting (set[str]):       A set of statuses that are interpreted as \"waiting\"   status_running (set[str]):     A set of statuses that are interpreted as \"running\"</p> Source code in <code>src/taskwait/__init__.py</code> <pre><code>class Task(ABC):\n    \"\"\"\n    Base class for tasks.\n\n    Inherit from this class to create something suitable to pass into\n    taskwait.\n\n    Attributes\n    ----------\n      status_waiting (set[str]):\n          A set of statuses that are interpreted as \"waiting\"\n      status_running (set[str]):\n        A set of statuses that are interpreted as \"running\"\n\n    \"\"\"\n\n    status_waiting: set[str]\n    status_running: set[str]\n\n    @abstractmethod\n    def status(self) -&gt; str:\n        \"\"\"Query for the status of the task.\"\"\"\n        pass  # pragma: no cover\n\n    @abstractmethod\n    def log(self) -&gt; list[str] | None:\n        \"\"\"Fetch logs for the task, if available.\"\"\"\n        return None  # pragma: no cover\n\n    @abstractmethod\n    def has_log(self) -&gt; bool:\n        \"\"\"Indicate if this task **may** produce logs (now or in future).\"\"\"\n        pass  # pragma: no cover\n</code></pre>"},{"location":"#taskwait.Task.has_log","title":"<code>has_log()</code>  <code>abstractmethod</code>","text":"<p>Indicate if this task may produce logs (now or in future).</p> Source code in <code>src/taskwait/__init__.py</code> <pre><code>@abstractmethod\ndef has_log(self) -&gt; bool:\n    \"\"\"Indicate if this task **may** produce logs (now or in future).\"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"#taskwait.Task.log","title":"<code>log()</code>  <code>abstractmethod</code>","text":"<p>Fetch logs for the task, if available.</p> Source code in <code>src/taskwait/__init__.py</code> <pre><code>@abstractmethod\ndef log(self) -&gt; list[str] | None:\n    \"\"\"Fetch logs for the task, if available.\"\"\"\n    return None  # pragma: no cover\n</code></pre>"},{"location":"#taskwait.Task.status","title":"<code>status()</code>  <code>abstractmethod</code>","text":"<p>Query for the status of the task.</p> Source code in <code>src/taskwait/__init__.py</code> <pre><code>@abstractmethod\ndef status(self) -&gt; str:\n    \"\"\"Query for the status of the task.\"\"\"\n    pass  # pragma: no cover\n</code></pre>"},{"location":"#taskwait.taskwait","title":"<code>taskwait(task, *, show_log=True, progress=True, poll=1, timeout=None)</code>","text":"<p>Wait for a task to complete.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>Task</code> <p>The task to wait on.</p> required <code>show_log</code> <code>bool</code> <p>Show logs, if available, while waiting?</p> <code>True</code> <code>progress</code> <code>bool</code> <p>Show a progress bar while waiting? Only shown while running if <code>show_log</code> is <code>False</code>.</p> <code>True</code> <code>poll</code> <code>float</code> <p>Period to poll for new status/logs, in seconds.</p> <code>1</code> <code>timeout</code> <code>float | None</code> <p>(float | None): Time, in seconds, to wait before throwing a <code>TimeoutError</code>.  If <code>None</code>, we wait forever.</p> <code>None</code> Source code in <code>src/taskwait/__init__.py</code> <pre><code>def taskwait(\n    task: Task,\n    *,\n    show_log: bool = True,\n    progress: bool = True,\n    poll: float = 1,\n    timeout: float | None = None,\n) -&gt; Result:\n    \"\"\"\n    Wait for a task to complete.\n\n    Args:\n      task (Task): The task to wait on.\n      show_log (bool): Show logs, if available, while waiting?\n      progress (bool): Show a progress bar while waiting? Only shown\n        while running if `show_log` is `False`.\n      poll (float): Period to poll for new status/logs, in seconds.\n      timeout: (float | None): Time, in seconds, to wait before\n        throwing a `TimeoutError`.  If `None`, we wait forever.\n\n    \"\"\"\n    t = _RunningTask(\n        task, show_log=show_log, progress=progress, poll=poll, timeout=timeout\n    )\n    return t.wait()\n</code></pre>"}]}